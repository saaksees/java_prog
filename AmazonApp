package saakshiapplication;

import java.util.*;

// Cust class
class Cust {
    private int id;
    private String name;
    private int pts;

    public Cust(int id, String name, int pts) {
        this.id = id;
        this.name = name;
        this.pts = pts;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getPts() {
        return pts;
    }

    @Override
    public String toString() {
        return "Cust{id=" + id + ", name='" + name + "', pts=" + pts + '}';
    }
}

// Prod class
class Prod {
    private int id;
    private String name;
    private double price;

    public Prod(int id, String name, double price) {
        this.id = id;
        this.name = name;
        this.price = price;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    @Override
    public String toString() {
        return "Prod{id=" + id + ", name='" + name + "', price=" + price + '}';
    }
}

// Ord class
class Ord {
    private int id;
    private int custId;
    private String date;

    public Ord(int id, int custId, String date) {
        this.id = id;
        this.custId = custId;
        this.date = date;
    }

    public int getId() {
        return id;
    }

    public int getCustId() {
        return custId;
    }

    public String getDate() {
        return date;
    }

    @Override
    public String toString() {
        return "Ord{id=" + id + ", custId=" + custId + ", date='" + date + "'}";
    }
}

// Comparator classes
class ProductComparators {
    public static Comparator<Prod> byPriceAscending() {
        return Comparator.comparingDouble(Prod::getPrice);
    }

    public static Comparator<Prod> byPriceDescending() {
        return Comparator.comparingDouble(Prod::getPrice).reversed();
    }

    public static Comparator<Prod> byName() {
        return Comparator.comparing(Prod::getName);
    }
}

class OrderComparators {
    public static Comparator<Ord> byDate() {
        return Comparator.comparing(Ord::getDate);
    }
}

class CustomerComparators {
    public static Comparator<Cust> byPointsDescending() {
        return Comparator.comparingInt(Cust::getPts).reversed();
    }

    public static Comparator<Cust> byName() {
        return Comparator.comparing(Cust::getName);
    }
}

public class AmazonApp {
    public static void main(String[] args) {
        // HashMaps for storing customers and products
        HashMap<Integer, Cust> custMap = new HashMap<>();
        custMap.put(1, new Cust(1, "Saakshi", 100));
        custMap.put(2, new Cust(2, "Rishabh", 200));

        HashMap<Integer, Prod> prodMap = new HashMap<>();
        prodMap.put(1, new Prod(1, "Iphone", 1500));
        prodMap.put(2, new Prod(2, "PS5", 800));

        // Orders with unique products for each customer using HashSet
        HashMap<Integer, HashSet<Prod>> custProds = new HashMap<>();
        custProds.put(1, new HashSet<>(Arrays.asList(prodMap.get(1))));
        custProds.put(2, new HashSet<>(Arrays.asList(prodMap.get(2))));

        // Sample orders
        List<Ord> ords = Arrays.asList(
            new Ord(1, 1, "2024-12-15"),
            new Ord(2, 2, "2024-12-16")
        );

        Scanner sc = new Scanner(System.in);
        int ch;
        do {
            System.out.println("\n--- Menu ---");
            System.out.println("1. Show Customers");
            System.out.println("2. Show Products");
            System.out.println("3. Show Orders");
            System.out.println("4. Sort Products by Price (Ascending)");
            System.out.println("5. Sort Products by Name");
            System.out.println("6. Sort Orders by Date");
            System.out.println("7. Sort Customers by Points (Descending)");
            System.out.println("8. Exit");
            System.out.print("Enter your choice: ");
            ch = sc.nextInt();

            switch (ch) {
                case 1:
                    custMap.values().forEach(System.out::println);
                    break;
                case 2:
                    prodMap.values().forEach(System.out::println);
                    break;
                case 3:
                    ords.forEach(System.out::println);
                    break;
                case 4:
                    prodMap.values().stream()
                        .sorted(ProductComparators.byPriceAscending())
                        .forEach(System.out::println);
                    break;
                case 5:
                    prodMap.values().stream()
                        .sorted(ProductComparators.byName())
                        .forEach(System.out::println);
                    break;
                case 6:
                    ords.stream()
                        .sorted(OrderComparators.byDate())
                        .forEach(System.out::println);
                    break;
                case 7:
                    custMap.values().stream()
                        .sorted(CustomerComparators.byPointsDescending())
                        .forEach(System.out::println);
                    break;
                case 8:
                    System.out.println("Exit.");
                    break;
                default:
                    System.out.println("Invalid choice");
            }
        } while (ch != 8);

        sc.close();
    }
}

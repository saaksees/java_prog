package saakshiapplication;
import java.util.concurrent.*;

class CoffeeShopSimulation {
    private static final int MAX_CAPACITY = 3;
    private static int counter = 0;
    private static final Object lock = new Object();

    static class Barista implements Runnable {
        private final String name;
        private final int coffeesToPrepare;

        Barista(String name, int coffeesToPrepare) {
            this.name = name;
            this.coffeesToPrepare = coffeesToPrepare;
        }

        @Override
        public void run() {
            for (int i = 0; i < coffeesToPrepare; i++) {
                prepareCoffee();
            }
        }

        private void prepareCoffee() {
            synchronized (lock) {
                while (counter == MAX_CAPACITY) {
                    try {
                        System.out.println(name + " is waiting. Counter is full.");
                        lock.wait();
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                }

                counter++;
                System.out.println(name + " prepared coffee. Counter: " + counter);
                lock.notifyAll(); // Notify waiting customers and reviewer
            }
        }
    }

    static class Customer implements Runnable {
        private final String name;
        private final int coffeesToPick;

        Customer(String name, int coffeesToPick) {
            this.name = name;
            this.coffeesToPick = coffeesToPick;
        }

        @Override
        public void run() {
            for (int i = 0; i < coffeesToPick; i++) {
                pickCoffee();
            }
        }

        private void pickCoffee() {
            synchronized (lock) {
                while (counter == 0) {
                    try {
                        System.out.println(name + " is waiting. Counter is empty.");
                        lock.wait();
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                }

                counter--;
                System.out.println(name + " picked up coffee. Counter: " + counter);
                lock.notifyAll(); // Notify waiting baristas and reviewer
            }
        }
    }

    static class CoffeeReviewer implements Runnable {
        @Override
        public void run() {
            sampleCoffee();
        }

        private void sampleCoffee() {
            synchronized (lock) {
                while (counter == 0) {
                    try {
                        System.out.println("Coffee Reviewer is waiting. Counter is empty.");
                        lock.wait();
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                }

                counter--;
                System.out.println("Coffee Reviewer sampled coffee. Counter: " + counter);
                lock.notifyAll(); // Notify waiting baristas and customers
            }
        }
    }

    public static void main(String[] args) throws InterruptedException {
        ExecutorService executorService = Executors.newCachedThreadPool();

        // Barista tasks
        Barista barista1 = new Barista("Barista 1", 2);
        Barista barista2 = new Barista("Barista 2", 3);

        // Customer tasks
        Customer customer1 = new Customer("Customer 1", 1);
        Customer customer2 = new Customer("Customer 2", 2);
        Customer customer3 = new Customer("Customer 3", 1);

        // Reviewer task
        CoffeeReviewer coffeeReviewer = new CoffeeReviewer();

        executorService.submit(barista1);
        executorService.submit(barista2);
        executorService.submit(customer1);
        executorService.submit(customer2);
        executorService.submit(customer3);
        executorService.submit(coffeeReviewer);

        // Shutdown after tasks are completed
        executorService.shutdown();
    }
}
